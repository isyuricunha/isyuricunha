name: "Auto Release"

on:
  push:
    branches:
      - "master"
    tags:
      - "v*" # Certifique-se de ajustar se suas tags seguirem um padrão diferente

jobs:
  auto-release:
    name: "Automatic Release"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2

      - name: "Build & test"
        run: |
          # Seus comandos de construção e teste aqui
          echo "Construção e teste concluídos com sucesso!"
        
      - name: "Set up Git"
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: "Get latest tag"
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "::set-output name=latest_tag::$latest_tag"

      - name: "Increment tag"
        id: increment_tag
        run: |
          # Extrair a versão da última tag
          last_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          version=${last_tag#"v"} # Remove o 'v' da tag

          # Incrementar a versão
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1)) # Incrementar o número do patch
          new_tag="v${major}.${minor}.${patch}"

          echo "::set-output name=new_tag::$new_tag"

      - name: "Tag and push"
        run: |
          new_tag=${{ steps.increment_tag.outputs.new_tag }}
          git tag $new_tag
          git push origin $new_tag

      - name: "Generate Changelog and Release"
        if: ${{ github.ref != 'refs/heads/master' }}
        id: release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          automatic_release_tag: ${{ steps.increment_tag.outputs.new_tag }}
          title: "isyuricunha / ${{ github.ref_name }}"
          files: |
            *

      - name: "Generate and Upload Changelog"
        if: steps.release.outputs.automatic_releases_tag != ''
        run: |
          # Gerar changelog a partir dos commits
          changelog=$(git log --pretty=format:"- %s (%h)" $(git describe --abbrev=0 --tags $(git describe --abbrev=0 --tags --abbrev=0..HEAD))..HEAD)

          # Atualizar notas de lançamento
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.release.outputs.automatic_releases_tag }} \
            -d '{"body": "'"$changelog"'"}'
