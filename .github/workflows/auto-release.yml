name: "Semantic Versioning and Auto Release"

on:
  push:
    branches:
      - "master"

jobs:
  auto-release:
    name: "Automatic Release"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3

      - name: "Install required tools"
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: "Get latest tag version"
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "Latest tag version: $latest_tag"

      - name: "Determine version increment based on commit message"
        id: determine_version_increment
        run: |
          if [[ $(git log -1 --pretty=%B | grep -E '!(feat|fix|breaking change)') ]]; then
            echo "::set-output name=version_increment patch"
          elif [[ $(git log -1 --pretty=%B | grep -E '(feat|breaking change)') ]]; then
            echo "::set-output name=version_increment minor"
          else
            echo "::set-output name=version_increment major"
          fi

      - name: "Extract current version (if exists)"
        id: extract_current_version
        if: steps.get_latest_tag.outputs.latest_tag != ''
        run: |
          current_version=$(echo $latest_tag | sed 's/^v//' | cut -d '.' -f1,2,3)
          echo "Current version (if exists): $current_version"

      - name: "Construct new version number"
        id: construct_new_version
        run: |
          version_increment=$(steps.determine_version_increment.outputs.version_increment)
          current_version=$(steps.extract_current_version.outputs.current_version)

          if [[ $current_version == "" ]]; then
            new_version="1.0.0"  # Initial version
          else
            major=$(echo $current_version | cut -d '.' -f1)
            minor=$(echo $current_version | cut -d '.' -f2)
            patch=$(echo $current_version | cut -d '.' -f3)

            case $version_increment in
              "patch")
                patch=$((patch + 1))
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
            esac

            new_version="$major.$minor.$patch"
          fi

          echo "New version: $new_version"

      - name: "Set up Git"
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: "Create tag with new version"
        run: |
          git tag -a "v$new_version" -m "v$new_version"

      - name: "Push tag to remote"
        run: |
          git push origin "v$new_version"
